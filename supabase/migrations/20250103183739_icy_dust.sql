\n\n-- Remove any existing complex constraints\nALTER TABLE profiles \nDROP CONSTRAINT IF EXISTS profiles_email_match_auth,\nDROP CONSTRAINT IF EXISTS profiles_email_check,\nDROP CONSTRAINT IF EXISTS profiles_email_unique;
\n\n-- Add simple unique constraint\nALTER TABLE profiles\nADD CONSTRAINT profiles_email_unique UNIQUE (email);
\n\n-- Create simple validation function\nCREATE OR REPLACE FUNCTION validate_profile()\nRETURNS TRIGGER AS $$\nBEGIN\n  -- Basic validation\n  IF NEW.email IS NULL OR NEW.email = '' THEN\n    RAISE EXCEPTION 'Email cannot be empty';
\n  END IF;
\n  \n  IF NEW.username IS NULL OR NEW.username = '' THEN\n    RAISE EXCEPTION 'Username cannot be empty';
\n  END IF;
\n\n  RETURN NEW;
\nEND;
\n$$ LANGUAGE plpgsql SECURITY DEFINER;
\n\n-- Create trigger for validation\nDROP TRIGGER IF EXISTS validate_profile_trigger ON profiles;
\nCREATE TRIGGER validate_profile_trigger\nBEFORE INSERT OR UPDATE ON profiles\nFOR EACH ROW\nEXECUTE FUNCTION validate_profile();
\n\n-- Ensure indexes exist\nCREATE INDEX IF NOT EXISTS idx_profiles_email ON profiles(email);
\nCREATE INDEX IF NOT EXISTS idx_profiles_username ON profiles(username);
;
