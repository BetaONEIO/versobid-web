-- Drop existing trigger and function\nDROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
\nDROP FUNCTION IF EXISTS handle_new_user();
\n\n-- Create improved user creation handler\nCREATE OR REPLACE FUNCTION handle_new_user()\nRETURNS trigger\nSECURITY DEFINER\nSET search_path = public\nLANGUAGE plpgsql\nAS $$\nDECLARE\n  username text;
\n  full_name text;
\nBEGIN\n  -- Get username and full_name from metadata\n  username := COALESCE(\n    NEW.raw_user_meta_data->>'username',\n    REGEXP_REPLACE(SPLIT_PART(NEW.email, '@', 1), '[^a-zA-Z0-9_]', '_', 'g')\n  );
\n  \n  full_name := COALESCE(\n    NEW.raw_user_meta_data->>'full_name',\n    username\n  );
\n\n  -- Ensure username is unique\n  WHILE EXISTS (SELECT 1 FROM profiles WHERE username = username) LOOP\n    username := username || '_' || floor(random() * 1000)::text;
\n  END LOOP;
\n\n  -- Create profile\n  BEGIN\n    INSERT INTO public.profiles (\n      id,\n      email,\n      username,\n      full_name,\n      created_at,\n      is_admin,\n      avatar_url,\n      shipping_address,\n      payment_setup,\n      onboarding_completed\n    ) VALUES (\n      NEW.id,\n      NEW.email,\n      username,\n      full_name,\n      NOW(),\n      false,\n      null,\n      null,\n      false,\n      false\n    );
\n  EXCEPTION WHEN others THEN\n    RAISE LOG 'Error creating profile for user %: %', NEW.id, SQLERRM;
\n    RETURN NEW;
\n  END;
\n\n  RETURN NEW;
\nEND;
\n$$;
\n\n-- Recreate trigger\nCREATE TRIGGER on_auth_user_created\n  AFTER INSERT ON auth.users\n  FOR EACH ROW\n  EXECUTE FUNCTION handle_new_user();
\n\n-- Drop existing policies\nDO $$ \nBEGIN\n    DROP POLICY IF EXISTS "profiles_select" ON profiles;
\n    DROP POLICY IF EXISTS "profiles_insert" ON profiles;
\n    DROP POLICY IF EXISTS "profiles_update" ON profiles;
\nEXCEPTION \n    WHEN undefined_object THEN NULL;
\nEND $$;
\n\n-- Create simplified policies\nCREATE POLICY "profiles_select"\n  ON profiles\n  FOR SELECT\n  TO public\n  USING (true);
\n\nCREATE POLICY "profiles_insert"\n  ON profiles\n  FOR INSERT\n  TO service_role\n  WITH CHECK (true);
\n\nCREATE POLICY "profiles_update"\n  ON profiles\n  FOR UPDATE\n  TO authenticated\n  USING (auth.uid() = id)\n  WITH CHECK (auth.uid() = id);
\n\n-- Ensure proper grants\nGRANT USAGE ON SCHEMA public TO anon, authenticated, service_role;
\nGRANT ALL ON profiles TO service_role;
\nGRANT SELECT ON profiles TO anon;
\nGRANT SELECT, UPDATE ON profiles TO authenticated;
\n\n-- Create unique indexes\nDROP INDEX IF EXISTS idx_profiles_email;
\nDROP INDEX IF EXISTS idx_profiles_username;
\nCREATE UNIQUE INDEX idx_profiles_email ON profiles(email);
\nCREATE UNIQUE INDEX idx_profiles_username ON profiles(username);
;
