\n\n-- Create items table\nCREATE TABLE IF NOT EXISTS items (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  title TEXT NOT NULL,\n  description TEXT,\n  min_price NUMERIC NOT NULL CHECK (min_price >= 0),\n  max_price NUMERIC NOT NULL CHECK (max_price >= min_price),\n  category TEXT NOT NULL,\n  shipping_options JSONB DEFAULT '[]',\n  condition TEXT,\n  seller_id UUID REFERENCES profiles(id) NOT NULL,\n  status TEXT NOT NULL DEFAULT 'active',\n  created_at TIMESTAMPTZ DEFAULT now(),\n  CHECK (status IN ('active', 'completed', 'archived'))\n);
\n\n-- Enable RLS\nALTER TABLE items ENABLE ROW LEVEL SECURITY;
\n\n-- Create policies\nCREATE POLICY "Anyone can view active items"\n  ON items\n  FOR SELECT\n  USING (status = 'active');
\n\nCREATE POLICY "Users can create their own items"\n  ON items\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (auth.uid() = seller_id);
\n\nCREATE POLICY "Users can update their own items"\n  ON items\n  FOR UPDATE\n  TO authenticated\n  USING (auth.uid() = seller_id)\n  WITH CHECK (auth.uid() = seller_id);
\n\nCREATE POLICY "Users can delete their own items"\n  ON items\n  FOR DELETE\n  TO authenticated\n  USING (auth.uid() = seller_id);
\n\n-- Create indexes\nCREATE INDEX items_seller_id_idx ON items(seller_id);
\nCREATE INDEX items_category_idx ON items(category);
\nCREATE INDEX items_status_idx ON items(status);
;
