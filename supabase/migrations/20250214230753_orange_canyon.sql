-- Create email verification template\nINSERT INTO email_templates (name, subject, html_content) VALUES\n('verify_email', 'Verify your VersoBid email address', '\n<!DOCTYPE html>\n<html>\n<head>\n  <style>\n    body { font-family: Arial, sans-serif;
 line-height: 1.6;
 }\n    .container { max-width: 600px;
 margin: 0 auto;
 padding: 20px;
 }\n    .header { background-color: #4F46E5;
 color: white;
 padding: 20px;
 text-align: center;
 }\n    .content { padding: 20px;
 }\n    .button {\n      display: inline-block;
\n      padding: 12px 24px;
\n      background-color: #4F46E5;
\n      color: white;
\n      text-decoration: none;
\n      border-radius: 4px;
\n      margin: 20px 0;
\n    }\n  </style>\n</head>\n<body>\n  <div class="container">\n    <div class="header">\n      <h1>Verify Your Email</h1>\n    </div>\n    <div class="content">\n      <h2>Welcome to VersoBid!</h2>\n      <p>Please verify your email address by clicking the button below:</p>\n      <a href="{{verification_link}}" class="button">Verify Email</a>\n      <p>If you did not create an account, you can safely ignore this email.</p>\n      <p>Best regards,<br>The VersoBid Team</p>\n    </div>\n  </div>\n</body>\n</html>\n') ON CONFLICT (name) DO UPDATE \nSET subject = EXCLUDED.subject,\n    html_content = EXCLUDED.html_content;
\n\n-- Create function to send verification email\nCREATE OR REPLACE FUNCTION send_verification_email()\nRETURNS TRIGGER AS $$\nBEGIN\n  -- Insert verification email into email_logs\n  INSERT INTO email_logs (\n    recipient,\n    subject,\n    template_name,\n    status,\n    data\n  ) VALUES (\n    NEW.email,\n    'Verify your VersoBid email address',\n    'verify_email',\n    'pending',\n    jsonb_build_object(\n      'verification_link', current_setting('app.frontend_url', true) || '/verify-email?token=' || \n        encode(crypto.gen_random_bytes(32), 'base64')\n    )\n  );
\n\n  -- Create verification notification\n  INSERT INTO notifications (\n    user_id,\n    type,\n    message,\n    data\n  ) VALUES (\n    NEW.id,\n    'email_verification',\n    'Please verify your email address to access all features',\n    jsonb_build_object(\n      'email', NEW.email\n    )\n  );
\n\n  RETURN NEW;
\nEND;
\n$$ LANGUAGE plpgsql SECURITY DEFINER;
\n\n-- Create trigger for verification email\nDROP TRIGGER IF EXISTS send_verification_email_trigger ON auth.users;
\nCREATE TRIGGER send_verification_email_trigger\n  AFTER INSERT ON auth.users\n  FOR EACH ROW\n  EXECUTE FUNCTION send_verification_email();
\n\n-- Only send welcome email after verification\nCREATE OR REPLACE FUNCTION send_welcome_email()\nRETURNS TRIGGER AS $$\nBEGIN\n  -- Only send welcome email if email is verified\n  IF NEW.email_confirmed_at IS NOT NULL THEN\n    INSERT INTO email_logs (\n      recipient,\n      subject,\n      template_name,\n      status,\n      data\n    ) VALUES (\n      NEW.email,\n      'Welcome to VersoBid!',\n      'welcome',\n      'pending',\n      jsonb_build_object(\n        'name', COALESCE(NEW.full_name, NEW.username),\n        'dashboard_link', current_setting('app.frontend_url', true) || '/dashboard'\n      )\n    );
\n\n    -- Create welcome notification\n    INSERT INTO notifications (\n      user_id,\n      type,\n      message,\n      data\n    ) VALUES (\n      NEW.id,\n      'welcome',\n      'Welcome to VersoBid! Your email has been verified.',\n      jsonb_build_object(\n        'profile_link', '/profile/' || NEW.username\n      )\n    );
\n  END IF;
\n\n  RETURN NEW;
\nEND;
\n$$ LANGUAGE plpgsql SECURITY DEFINER;
\n\n-- Update welcome email trigger to fire on email verification\nDROP TRIGGER IF EXISTS send_welcome_email_trigger ON profiles;
\nCREATE TRIGGER send_welcome_email_trigger\n  AFTER UPDATE OF email_confirmed_at ON auth.users\n  FOR EACH ROW\n  WHEN (OLD.email_confirmed_at IS NULL AND NEW.email_confirmed_at IS NOT NULL)\n  EXECUTE FUNCTION send_welcome_email();
;
