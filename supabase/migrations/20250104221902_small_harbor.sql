\n\n-- Create better error handling function\nCREATE OR REPLACE FUNCTION handle_profile_creation()\nRETURNS TRIGGER AS $$\nBEGIN\n  BEGIN\n    -- Basic validation\n    IF NEW.email IS NULL OR NEW.email = '' THEN\n      RAISE EXCEPTION 'Email cannot be empty';
\n    END IF;
\n\n    IF NEW.username IS NULL OR NEW.username = '' THEN\n      RAISE EXCEPTION 'Username cannot be empty';
\n    END IF;
\n\n    -- Log attempt\n    INSERT INTO signup_errors (user_id, email, error_message)\n    VALUES (NEW.id, NEW.email, 'Profile creation attempted');
\n\n    RETURN NEW;
\n  EXCEPTION WHEN OTHERS THEN\n    -- Log error\n    INSERT INTO signup_errors (\n      user_id,\n      email,\n      error_message,\n      error_details\n    ) VALUES (\n      NEW.id,\n      NEW.email,\n      'Profile creation failed: ' || SQLERRM,\n      jsonb_build_object(\n        'error_code', SQLSTATE,\n        'error_message', SQLERRM\n      )\n    );
\n    RAISE;
\n  END;
\nEND;
\n$$ LANGUAGE plpgsql SECURITY DEFINER;
\n\n-- Create trigger for error handling\nDROP TRIGGER IF EXISTS handle_profile_creation_trigger ON profiles;
\nCREATE TRIGGER handle_profile_creation_trigger\n  BEFORE INSERT ON profiles\n  FOR EACH ROW\n  EXECUTE FUNCTION handle_profile_creation();
\n\n-- Grant necessary permissions\nGRANT ALL ON signup_errors TO authenticated;
\nGRANT ALL ON signup_errors TO service_role;
;
