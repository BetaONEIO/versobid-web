-- Drop existing trigger and function\nDROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
\nDROP FUNCTION IF EXISTS handle_new_user();
\n\n-- Create improved user creation handler\nCREATE OR REPLACE FUNCTION handle_new_user()\nRETURNS trigger\nSECURITY DEFINER\nSET search_path = public\nLANGUAGE plpgsql\nAS $$\nDECLARE\n  username text;
\n  full_name text;
\n  base_username text;
\n  counter integer := 0;
\n  max_attempts constant integer := 5;
\nBEGIN\n  -- Extract or generate base username from email\n  base_username := REGEXP_REPLACE(SPLIT_PART(NEW.email, '@', 1), '[^a-zA-Z0-9_]', '_', 'g');
\n  \n  -- Get username from metadata or use base_username\n  username := COALESCE(NEW.raw_user_meta_data->>'username', base_username);
\n  \n  -- Get full name from metadata or use username\n  full_name := COALESCE(NEW.raw_user_meta_data->>'full_name', username);
\n\n  -- Ensure username is at least 3 characters\n  IF length(username) < 3 THEN\n    username := username || LPAD(floor(random() * 1000)::text, 3, '0');
\n  END IF;
\n\n  -- Try to insert profile with unique username\n  LOOP\n    BEGIN\n      INSERT INTO public.profiles (\n        id,\n        email,\n        username,\n        full_name,\n        created_at,\n        is_admin,\n        avatar_url,\n        shipping_address,\n        payment_setup,\n        onboarding_completed\n      ) VALUES (\n        NEW.id,\n        NEW.email,\n        CASE \n          WHEN counter = 0 THEN username\n          ELSE username || '_' || counter::text\n        END,\n        full_name,\n        NOW(),\n        false,\n        null,\n        null,\n        false,\n        false\n      );
\n      \n      -- If we get here, insert was successful\n      RETURN NEW;
\n      \n    EXCEPTION \n      WHEN unique_violation THEN\n        -- Only retry up to max_attempts\n        IF counter >= max_attempts THEN\n          RAISE EXCEPTION 'Could not generate unique username after % attempts', max_attempts;
\n        END IF;
\n        counter := counter + 1;
\n        CONTINUE;
\n      WHEN OTHERS THEN\n        -- Log any other errors but don't prevent user creation\n        RAISE LOG 'Error creating profile for user %: % (SQLSTATE: %)', \n          NEW.id, SQLERRM, SQLSTATE;
\n        RETURN NEW;
\n    END;
\n  END LOOP;
\nEND;
\n$$;
\n\n-- Recreate trigger\nCREATE TRIGGER on_auth_user_created\n  AFTER INSERT ON auth.users\n  FOR EACH ROW\n  EXECUTE FUNCTION handle_new_user();
\n\n-- Ensure RLS is enabled\nALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
\n\n-- Drop existing policies safely\nDO $$ \nBEGIN\n    DROP POLICY IF EXISTS "profiles_select" ON profiles;
\n    DROP POLICY IF EXISTS "profiles_insert" ON profiles;
\n    DROP POLICY IF EXISTS "profiles_update" ON profiles;
\nEXCEPTION \n    WHEN undefined_object THEN NULL;
\nEND $$;
\n\n-- Create simplified policies\nCREATE POLICY "profiles_select"\n  ON profiles\n  FOR SELECT\n  TO public\n  USING (true);
\n\nCREATE POLICY "profiles_insert"\n  ON profiles\n  FOR INSERT\n  TO service_role\n  WITH CHECK (true);
\n\nCREATE POLICY "profiles_update"\n  ON profiles\n  FOR UPDATE\n  TO authenticated\n  USING (auth.uid() = id)\n  WITH CHECK (auth.uid() = id);
\n\n-- Ensure proper grants\nGRANT USAGE ON SCHEMA public TO anon, authenticated, service_role;
\nGRANT ALL ON profiles TO service_role;
\nGRANT SELECT ON profiles TO anon;
\nGRANT SELECT, UPDATE ON profiles TO authenticated;
\n\n-- Create unique indexes\nDROP INDEX IF EXISTS idx_profiles_email;
\nDROP INDEX IF EXISTS idx_profiles_username;
\nCREATE UNIQUE INDEX idx_profiles_email ON profiles(email);
\nCREATE UNIQUE INDEX idx_profiles_username ON profiles(username);
;
