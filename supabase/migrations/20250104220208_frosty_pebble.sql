\n\n-- Create a table to log signup errors\nCREATE TABLE IF NOT EXISTS signup_errors (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    user_id UUID,\n    email TEXT,\n    error_message TEXT,\n    error_details JSONB,\n    created_at TIMESTAMPTZ DEFAULT now()\n);
\n\n-- Function to log signup errors\nCREATE OR REPLACE FUNCTION log_signup_error(\n    p_user_id UUID,\n    p_email TEXT,\n    p_error_message TEXT,\n    p_error_details JSONB DEFAULT NULL\n) RETURNS void AS $$\nBEGIN\n    INSERT INTO signup_errors (user_id, email, error_message, error_details)\n    VALUES (p_user_id, p_email, p_error_message, p_error_details);
\nEND;
\n$$ LANGUAGE plpgsql SECURITY DEFINER;
\n\n-- Function to check profile creation status\nCREATE OR REPLACE FUNCTION check_profile_status(p_user_id UUID)\nRETURNS TABLE (\n    has_auth BOOLEAN,\n    has_profile BOOLEAN,\n    error_message TEXT\n) AS $$\nBEGIN\n    RETURN QUERY\n    SELECT \n        EXISTS(SELECT 1 FROM auth.users WHERE id = p_user_id) as has_auth,\n        EXISTS(SELECT 1 FROM profiles WHERE id = p_user_id) as has_profile,\n        (SELECT error_message FROM signup_errors WHERE user_id = p_user_id ORDER BY created_at DESC LIMIT 1) as error_message;
\nEND;
\n$$ LANGUAGE plpgsql SECURITY DEFINER;
\n\n-- Function to clean up failed signups\nCREATE OR REPLACE FUNCTION cleanup_failed_signup(p_user_id UUID)\nRETURNS BOOLEAN AS $$\nBEGIN\n    -- Delete auth user if exists\n    DELETE FROM auth.users WHERE id = p_user_id;
\n    -- Delete profile if exists\n    DELETE FROM profiles WHERE id = p_user_id;
\n    -- Log cleanup\n    INSERT INTO signup_errors (user_id, email, error_message)\n    VALUES (p_user_id, NULL, 'Cleaned up failed signup');
\n    RETURN TRUE;
\nEND;
\n$$ LANGUAGE plpgsql SECURITY DEFINER;
;
