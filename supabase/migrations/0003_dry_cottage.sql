\n\n-- Drop existing policies\nDROP POLICY IF EXISTS "Profiles are viewable by authenticated users" ON profiles;
\nDROP POLICY IF EXISTS "Users can insert their own profile" ON profiles;
\nDROP POLICY IF EXISTS "Users can update own profile" ON profiles;
\nDROP POLICY IF EXISTS "Public profiles are viewable by everyone" ON profiles;
\nDROP POLICY IF EXISTS "Users can update their own profile" ON profiles;
\n\n-- Drop and recreate profiles table\nDROP TABLE IF EXISTS profiles CASCADE;
\nCREATE TABLE profiles (\n  id UUID PRIMARY KEY REFERENCES auth.users(id),\n  created_at TIMESTAMPTZ DEFAULT now(),\n  username TEXT UNIQUE NOT NULL,\n  full_name TEXT NOT NULL,\n  avatar_url TEXT,\n  email TEXT UNIQUE NOT NULL,\n  CONSTRAINT username_length CHECK (char_length(username) >= 3)\n);
\n\n-- Enable RLS\nALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
\n\n-- Create new policies\nCREATE POLICY "Profiles are viewable by authenticated users"\n  ON profiles\n  FOR SELECT\n  TO authenticated\n  USING (true);
\n\nCREATE POLICY "Users can insert their own profile"\n  ON profiles\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (auth.uid() = id);
\n\nCREATE POLICY "Users can update own profile"\n  ON profiles\n  FOR UPDATE\n  TO authenticated\n  USING (auth.uid() = id);
\n\n-- Create indexes\nCREATE INDEX IF NOT EXISTS profiles_username_idx ON profiles (username);
\nCREATE INDEX IF NOT EXISTS profiles_email_idx ON profiles (email);
\n\n-- Create public profiles view\nCREATE VIEW public_profiles AS\n  SELECT id, username, avatar_url\n  FROM profiles;
\n\n-- Grant access to public profiles view\nGRANT SELECT ON public_profiles TO anon, authenticated;
;
