-- Drop existing policies first\nDROP POLICY IF EXISTS "profiles_select_v6" ON profiles;
\nDROP POLICY IF EXISTS "profiles_insert_v6" ON profiles;
\nDROP POLICY IF EXISTS "profiles_update_v6" ON profiles;
\n\n-- Enable RLS\nALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
\n\n-- Create simplified policies\nCREATE POLICY "allow_public_read"\n  ON profiles\n  FOR SELECT\n  TO public\n  USING (true);
\n\nCREATE POLICY "allow_auth_insert"\n  ON profiles\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (true);
\n\nCREATE POLICY "allow_individual_update"\n  ON profiles\n  FOR UPDATE\n  TO authenticated\n  USING (auth.uid() = id);
\n\n-- Ensure proper grants\nGRANT ALL ON profiles TO authenticated;
\nGRANT SELECT ON profiles TO anon;
\n\n-- Create function to handle profile creation\nCREATE OR REPLACE FUNCTION handle_new_user()\nRETURNS trigger AS $$\nBEGIN\n  INSERT INTO public.profiles (id, email, username, full_name, created_at)\n  VALUES (\n    new.id,\n    new.email,\n    new.raw_user_meta_data->>'username',\n    new.raw_user_meta_data->>'full_name',\n    now()\n  );
\n  RETURN new;
\nEND;
\n$$ LANGUAGE plpgsql SECURITY DEFINER;
\n\n-- Create trigger for automatic profile creation\nDROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
\nCREATE TRIGGER on_auth_user_created\n  AFTER INSERT ON auth.users\n  FOR EACH ROW EXECUTE FUNCTION handle_new_user();
;
