-- Drop all existing policies on profiles\nDROP POLICY IF EXISTS "Profiles are viewable by authenticated users" ON profiles;
\nDROP POLICY IF EXISTS "Enable read access for authenticated users" ON profiles;
\nDROP POLICY IF EXISTS "Enable insert for authenticated users" ON profiles;
\nDROP POLICY IF EXISTS "Enable update for users based on id" ON profiles;
\nDROP POLICY IF EXISTS "Users can insert their own profile" ON profiles;
\nDROP POLICY IF EXISTS "Users can update own profile" ON profiles;
\nDROP POLICY IF EXISTS "Admins can view all profiles" ON profiles;
\n\n-- Ensure RLS is enabled\nALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
\n\n-- Create new simplified policies\nCREATE POLICY "Allow users to read any profile"\n  ON profiles\n  FOR SELECT\n  TO authenticated\n  USING (true);
\n\nCREATE POLICY "Allow users to insert their own profile"\n  ON profiles\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (auth.uid() = id);
\n\nCREATE POLICY "Allow users to update their own profile"\n  ON profiles\n  FOR UPDATE\n  TO authenticated\n  USING (auth.uid() = id)\n  WITH CHECK (auth.uid() = id);
\n\nCREATE POLICY "Allow admins full access"\n  ON profiles\n  TO authenticated\n  USING (\n    CASE \n      WHEN is_admin = true THEN true\n      ELSE auth.uid() = id\n    END\n  )\n  WITH CHECK (\n    CASE \n      WHEN is_admin = true THEN true\n      ELSE auth.uid() = id\n    END\n  );
\n\n-- Create index for better performance\nCREATE INDEX IF NOT EXISTS idx_profiles_auth_id ON profiles(id);
\nCREATE INDEX IF NOT EXISTS idx_profiles_is_admin ON profiles(is_admin);
;
