\n\n-- Drop existing bids table if it exists\nDROP TABLE IF EXISTS bids CASCADE;
\n\n-- Create bids table\nCREATE TABLE bids (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  item_id UUID REFERENCES items(id) ON DELETE CASCADE,\n  bidder_id UUID REFERENCES profiles(id) ON DELETE CASCADE,\n  amount NUMERIC NOT NULL CHECK (amount >= 0),\n  message TEXT,\n  status TEXT NOT NULL DEFAULT 'pending',\n  created_at TIMESTAMPTZ DEFAULT now(),\n  CONSTRAINT valid_status CHECK (status IN ('pending', 'accepted', 'rejected'))\n);
\n\n-- Enable RLS\nALTER TABLE bids ENABLE ROW LEVEL SECURITY;
\n\n-- Create policies\nCREATE POLICY "Bidders can view their own bids"\n  ON bids\n  FOR SELECT\n  TO authenticated\n  USING (\n    bidder_id = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM items\n      WHERE items.id = bids.item_id\n      AND items.seller_id = auth.uid()\n    )\n  );
\n\nCREATE POLICY "Users can create bids on others' items"\n  ON bids\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    bidder_id = auth.uid() AND\n    NOT EXISTS (\n      SELECT 1 FROM items\n      WHERE items.id = bids.item_id\n      AND items.seller_id = auth.uid()\n    )\n  );
\n\nCREATE POLICY "Sellers can update bid status"\n  ON bids\n  FOR UPDATE\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM items\n      WHERE items.id = bids.item_id\n      AND items.seller_id = auth.uid()\n    )\n  );
\n\n-- Create indexes\nCREATE INDEX idx_bids_item_id ON bids(item_id);
\nCREATE INDEX idx_bids_bidder_id ON bids(bidder_id);
\nCREATE INDEX idx_bids_status ON bids(status);
\n\n-- Grant permissions\nGRANT ALL ON bids TO authenticated;
;
