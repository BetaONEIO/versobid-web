\n\n-- Function to manage users (update/delete)\nCREATE OR REPLACE FUNCTION manage_user(\n  admin_id UUID,\n  target_user_id UUID,\n  action TEXT,\n  updates JSONB DEFAULT NULL\n) RETURNS BOOLEAN AS $$\nBEGIN\n  -- Verify admin status\n  IF NOT is_admin(admin_id) THEN\n    RAISE EXCEPTION 'Unauthorized: User is not an admin';
\n  END IF;
\n\n  CASE action\n    WHEN 'update' THEN\n      UPDATE profiles \n      SET \n        full_name = COALESCE(updates->>'full_name', full_name),\n        email = COALESCE(updates->>'email', email),\n        username = COALESCE(updates->>'username', username)\n      WHERE id = target_user_id;
\n    WHEN 'delete' THEN\n      -- Don't allow deleting other admins\n      IF EXISTS (SELECT 1 FROM profiles WHERE id = target_user_id AND is_admin = true) THEN\n        RAISE EXCEPTION 'Cannot delete admin users';
\n      END IF;
\n      DELETE FROM profiles WHERE id = target_user_id;
\n    ELSE\n      RAISE EXCEPTION 'Invalid action';
\n  END CASE;
\n\n  RETURN TRUE;
\nEND;
\n$$ LANGUAGE plpgsql SECURITY DEFINER;
\n\n-- Function to manage admin status\nCREATE OR REPLACE FUNCTION manage_admin_status(\n  admin_id UUID,\n  target_user_id UUID,\n  make_admin BOOLEAN\n) RETURNS BOOLEAN AS $$\nBEGIN\n  -- Verify admin status\n  IF NOT is_admin(admin_id) THEN\n    RAISE EXCEPTION 'Unauthorized: User is not an admin';
\n  END IF;
\n\n  UPDATE profiles \n  SET is_admin = make_admin\n  WHERE id = target_user_id;
\n\n  RETURN TRUE;
\nEND;
\n$$ LANGUAGE plpgsql SECURITY DEFINER;
\n\n-- Create admin activity log table\nCREATE TABLE IF NOT EXISTS admin_activity_log (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  admin_id UUID REFERENCES profiles(id) NOT NULL,\n  action TEXT NOT NULL,\n  target_type TEXT NOT NULL,\n  target_id UUID NOT NULL,\n  details JSONB,\n  created_at TIMESTAMPTZ DEFAULT now()\n);
\n\n-- Enable RLS on activity log\nALTER TABLE admin_activity_log ENABLE ROW LEVEL SECURITY;
\n\n-- Admin can view all activity\nCREATE POLICY "Admins can view all activity"\n  ON admin_activity_log\n  FOR SELECT\n  TO authenticated\n  USING (is_admin(auth.uid()));
\n\n-- Function to log admin activity\nCREATE OR REPLACE FUNCTION log_admin_activity(\n  admin_id UUID,\n  action TEXT,\n  target_type TEXT,\n  target_id UUID,\n  details JSONB DEFAULT NULL\n) RETURNS VOID AS $$\nBEGIN\n  INSERT INTO admin_activity_log (admin_id, action, target_type, target_id, details)\n  VALUES (admin_id, action, target_type, target_id, details);
\nEND;
\n$$ LANGUAGE plpgsql SECURITY DEFINER;
;
