\n\n-- Create payments table if it doesn't exist\nCREATE TABLE IF NOT EXISTS payments (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  amount NUMERIC NOT NULL CHECK (amount >= 0),\n  currency TEXT NOT NULL,\n  item_id UUID REFERENCES items(id) ON DELETE CASCADE,\n  buyer_id UUID REFERENCES profiles(id) ON DELETE CASCADE,\n  seller_id UUID REFERENCES profiles(id) ON DELETE CASCADE,\n  transaction_id TEXT NOT NULL,\n  status TEXT NOT NULL DEFAULT 'pending',\n  provider TEXT NOT NULL,\n  shipping_deadline TIMESTAMPTZ,\n  shipping_confirmed BOOLEAN DEFAULT false,\n  created_at TIMESTAMPTZ DEFAULT now()\n);
\n\n-- Add rating column to profiles if not exists\nDO $$ \nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns \n    WHERE table_name = 'profiles' \n    AND column_name = 'rating'\n  ) THEN\n    ALTER TABLE profiles ADD COLUMN rating INTEGER DEFAULT 0;
\n  END IF;
\nEND $$;
\n\n-- Create function to update seller rating\nCREATE OR REPLACE FUNCTION update_seller_rating(\n  seller_id UUID,\n  rating_change INTEGER\n)\nRETURNS void AS $$\nBEGIN\n  UPDATE profiles\n  SET rating = rating + rating_change\n  WHERE id = seller_id;
\nEND;
\n$$ LANGUAGE plpgsql SECURITY DEFINER;
\n\n-- Create function to check shipping deadlines\nCREATE OR REPLACE FUNCTION check_shipping_deadlines()\nRETURNS void AS $$\nDECLARE\n  payment RECORD;
\nBEGIN\n  FOR payment IN\n    SELECT *\n    FROM payments\n    WHERE status = 'completed'\n    AND shipping_deadline < NOW()\n    AND shipping_confirmed = false\n  LOOP\n    -- Apply negative rating\n    PERFORM update_seller_rating(payment.seller_id, -1);
\n    \n    -- Create notifications\n    INSERT INTO notifications (user_id, type, message, data)\n    VALUES\n      (payment.buyer_id, 'shipping_overdue', \n       'Seller failed to ship item in time. A negative rating has been applied.',\n       jsonb_build_object('payment_id', payment.id)),\n      (payment.seller_id, 'negative_rating',\n       'You received a negative rating for failing to ship item on time.',\n       jsonb_build_object('payment_id', payment.id));
\n  END LOOP;
\nEND;
\n$$ LANGUAGE plpgsql SECURITY DEFINER;
\n\n-- Enable RLS on payments table\nALTER TABLE payments ENABLE ROW LEVEL SECURITY;
\n\n-- Create policies for payments table\nCREATE POLICY "Users can view their own payments"\n  ON payments\n  FOR SELECT\n  TO authenticated\n  USING (\n    buyer_id = auth.uid() OR \n    seller_id = auth.uid()\n  );
\n\nCREATE POLICY "Users can update their own payments"\n  ON payments\n  FOR UPDATE\n  TO authenticated\n  USING (\n    seller_id = auth.uid()\n  );
\n\n-- Create indexes for better performance\nCREATE INDEX IF NOT EXISTS idx_payments_buyer_id ON payments(buyer_id);
\nCREATE INDEX IF NOT EXISTS idx_payments_seller_id ON payments(seller_id);
\nCREATE INDEX IF NOT EXISTS idx_payments_item_id ON payments(item_id);
\nCREATE INDEX IF NOT EXISTS idx_payments_status ON payments(status);
\nCREATE INDEX IF NOT EXISTS idx_payments_shipping_deadline ON payments(shipping_deadline);
;
